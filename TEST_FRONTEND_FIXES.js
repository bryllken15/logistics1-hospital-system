import { createClient } from '@supabase/supabase-js'

const supabaseUrl = 'https://otjdtdnuowhlqriidgfg.supabase.co'
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im90amR0ZG51b3dobHFyaWlkZ2ZnIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTk4MDc5MjQsImV4cCI6MjA3NTM4MzkyNH0.XMR9R2JTuVRW-3L8BXh0ksj-kbNSRCYHIT_DM1PrQFg'

const supabase = createClient(supabaseUrl, supabaseKey)

console.log('üîç TESTING FRONTEND FIXES...\n')

async function testFrontendFixes() {
  try {
    console.log('1Ô∏è‚É£ Testing simplified purchase requests query...')
    
    const { data: purchaseRequests, error: prError } = await supabase
      .from('purchase_requests')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(5)
    
    if (prError) {
      console.log(`‚ùå Purchase requests failed: ${prError.message}`)
    } else {
      console.log(`‚úÖ Purchase requests work: ${purchaseRequests?.length || 0} found`)
    }
    
    console.log('\n2Ô∏è‚É£ Testing simplified procurement approvals query...')
    
    const { data: procurementApprovals, error: paError } = await supabase
      .from('procurement_approvals')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(5)
    
    if (paError) {
      console.log(`‚ùå Procurement approvals failed: ${paError.message}`)
    } else {
      console.log(`‚úÖ Procurement approvals work: ${procurementApprovals?.length || 0} found`)
    }
    
    console.log('\n3Ô∏è‚É£ Testing user procurement approvals query...')
    
    // Get a user ID
    const { data: users } = await supabase
      .from('users')
      .select('id')
      .limit(1)
      .single()
    
    let userError = null
    if (users) {
      const { data: userApprovals, error: userErr } = await supabase
        .from('procurement_approvals')
        .select('*')
        .eq('requested_by', users.id)
        .order('created_at', { ascending: false })
      
      userError = userErr
      if (userError) {
        console.log(`‚ùå User approvals failed: ${userError.message}`)
      } else {
        console.log(`‚úÖ User approvals work: ${userApprovals?.length || 0} found`)
      }
    } else {
      console.log('‚ùå No users found')
    }
    
    console.log('\n4Ô∏è‚É£ Testing pending approvals query...')
    
    const { data: pendingApprovals, error: pendingError } = await supabase
      .from('procurement_approvals')
      .select('*')
      .eq('status', 'pending')
      .order('created_at', { ascending: false })
    
    if (pendingError) {
      console.log(`‚ùå Pending approvals failed: ${pendingError.message}`)
    } else {
      console.log(`‚úÖ Pending approvals work: ${pendingApprovals?.length || 0} found`)
    }
    
    console.log('\n5Ô∏è‚É£ Testing notifications...')
    
    const { data: notifications, error: notifError } = await supabase
      .from('notifications')
      .select('*')
      .limit(5)
    
    if (notifError) {
      console.log(`‚ùå Notifications failed: ${notifError.message}`)
    } else {
      console.log(`‚úÖ Notifications work: ${notifications?.length || 0} found`)
    }
    
    console.log('\nüéØ FRONTEND FIX TEST RESULTS:')
    console.log('========================================')
    
    if (prError) console.log('‚ùå Purchase requests still have issues')
    if (paError) console.log('‚ùå Procurement approvals still have issues')
    if (userError) console.log('‚ùå User approvals still have issues')
    if (pendingError) console.log('‚ùå Pending approvals still have issues')
    if (notifError) console.log('‚ùå Notifications still have issues')
    
    if (!prError && !paError && !userError && !pendingError && !notifError) {
      console.log('‚úÖ ALL FRONTEND FIXES WORK!')
      console.log('üéâ Your application should work now!')
      console.log('')
      console.log('üìã NEXT STEPS:')
      console.log('1. Restart your development server: npm run dev')
      console.log('2. Login as manager (username: manager, password: manager123)')
      console.log('3. Check the Manager Dashboard - should load without errors')
      console.log('4. No more 400/401/404/500 errors!')
      console.log('5. All data fetching should work!')
    } else {
      console.log('‚ùå Some queries still failed - see details above')
    }
    
  } catch (error) {
    console.error('üí• Test failed with error:', error)
  }
}

testFrontendFixes()
